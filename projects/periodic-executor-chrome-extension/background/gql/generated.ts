import { GraphQLClient, RequestOptions } from 'graphql-request';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
type GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

export type Mutation = {
  __typename?: 'Mutation';
  updateScrapedData?: Maybe<UpdateScrapedDataMutationPayload>;
};


export type MutationUpdateScrapedDataArgs = {
  input: UpdateScrapedDataMutationInput;
};

export type Query = {
  __typename?: 'Query';
  getUnscrapedItem?: Maybe<Scrape>;
};

export type Scrape = {
  __typename?: 'Scrape';
  executedAt?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  url: Scalars['String']['output'];
  video: Video;
};

/** Autogenerated input type of UpdateScrapedDataMutation */
export type UpdateScrapedDataMutationInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  episodeCount: Scalars['Int']['input'];
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of UpdateScrapedDataMutation. */
export type UpdateScrapedDataMutationPayload = {
  __typename?: 'UpdateScrapedDataMutationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  scrape: Scrape;
};

export type Video = {
  __typename?: 'Video';
  episodeCount?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  scrapes: Array<Scrape>;
  url: Scalars['String']['output'];
};

export type Background_GetUnscrapedItemQueryVariables = Exact<{ [key: string]: never; }>;


export type Background_GetUnscrapedItemQuery = { __typename?: 'Query', getUnscrapedItem?: { __typename?: 'Scrape', id: string, url: string, video: { __typename?: 'Video', id: string } } | null };

export type Background_UpdateScrapedDataMutationVariables = Exact<{
  input: UpdateScrapedDataMutationInput;
}>;


export type Background_UpdateScrapedDataMutation = { __typename?: 'Mutation', updateScrapedData?: { __typename?: 'UpdateScrapedDataMutationPayload', scrape: { __typename?: 'Scrape', id: string } } | null };


export const Background_GetUnscrapedItemDocument = gql`
    query background_getUnscrapedItem {
  getUnscrapedItem {
    id
    url
    video {
      id
    }
  }
}
    `;
export const Background_UpdateScrapedDataDocument = gql`
    mutation background_updateScrapedData($input: UpdateScrapedDataMutationInput!) {
  updateScrapedData(input: $input) {
    scrape {
      id
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    background_getUnscrapedItem(variables?: Background_GetUnscrapedItemQueryVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<Background_GetUnscrapedItemQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<Background_GetUnscrapedItemQuery>(Background_GetUnscrapedItemDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'background_getUnscrapedItem', 'query', variables);
    },
    background_updateScrapedData(variables: Background_UpdateScrapedDataMutationVariables, requestHeaders?: GraphQLClientRequestHeaders): Promise<Background_UpdateScrapedDataMutation> {
      return withWrapper((wrappedRequestHeaders) => client.request<Background_UpdateScrapedDataMutation>(Background_UpdateScrapedDataDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'background_updateScrapedData', 'mutation', variables);
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;